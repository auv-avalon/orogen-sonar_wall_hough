name "sonar_wall_hough"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "sonar_wall_houghType.hpp"
import_types_from "base"
import_types_from "sonar_wall_hough/Config.hpp"
import_types_from "uw_localization/types/particle.hpp"
import_types_from "uw_localization/types/map.hpp"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
using_library "sonar_wall_hough"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the sonar_wall_hough namespace.
task_context "Task" do
   needs_configuration
   # A configuration property (here, a std::string). Its value can be retrieved
   # in the C++ code with # _config_value.get() and _config_value.set(new_value).

   property("sensorAngularResolution", 'double', 1.8).
       doc("Angular resolution of sonar (in degree)")
   property("anglesPerBin", 'int', 2).
       doc("Number of Angle steps collected in 1 bin in houghspace")
   property("maxDistance", 'int', 600). #600 for sauc-e logs
       doc("Number of bins of the sonar")
   property("filterThreshold", 'int', 50).
       doc("bins in sonar beam with fewer entries will be ignored")
   property("withMinimumFilter", 'bool', true). #true for sauc-e logs
       doc("If the incoming beams should be filtered with a minimum filter first")
   property("minDistance", 'double', 2.5).
       doc("Minimum distance for sonar to filter out the auv itself")
   property("distancesPerBin", 'int', 4).
       doc("Number of distance bin in sonar beam collected in 1 bin in houghspace")
   property("minLineVotesRatio", 'double', 0.1).
       doc("Factor for sonar peaks; lines must have at least that many votes to be detected as lines")
   property("angleDelta", 'double', 220.0). #220.0 for sauc-e logs
       doc("the angle between orientation-zero and basin zero (in degree)")
   property("basinHeight", 'double', 60.0). #60.0 for sauc-e logs
       doc("Height of the basin")
   property("basinWidth", 'double', 50.0). #50.0 for sauc-e logs
       doc("Width of the basin")
   property("gain", 'int', 10). #10 for sauc-e logs
       doc("How much do the sonar peaks accumulate the hough space")

   # An input port, i.e. an object from which the component gets data from
   # other components' outputs
   #
   # Data can be retrieved using _input.read(value), which returns true if data
   # was available, and false otherwise. _input.connected() returns if this
   # input is connected to an output or not.
   input_port "input", "/base/samples/SonarBeam"
   input_port "reset", "bool"
   input_port "orientation", "/base/samples/RigidBodyState"

   # An output port, i.e. an object to which the component pushes data so that
   # it is transmitted to other components' inputs
   #
   # Data can be written using _output.write(value). _output.connected() returns
   # if this output is connected to an input or not.
   output_port("map_wall_lines", "/std/vector</uw_localization/Linemark>").
        doc("current wall features from the using map")
   output_port("ppeaks", "/base/samples/LaserScan").
        doc("Sonar Peaks")

   output_port "lines", "/base/samples/frame/Frame"
   output_port "peaks", "/base/samples/frame/Frame"
   output_port "houghspace", "/base/samples/frame/Frame"
   output_port "position", "/base/samples/RigidBodyState"

   # If you want that component's updateHook() to be executed when the "input"
   # port gets data, uncomment this
   port_driven "input"
   port_driven "reset"
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "sonar_wall_hough_deployment" do
    # This is a test deployment that should not be installed
    #do_not_install
    task("sonar_wall_hough", "Task")
    add_default_logger
end

